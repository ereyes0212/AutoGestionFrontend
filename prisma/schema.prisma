generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ConfiguracionAprobacion {
  Id                          String                        @id @db.VarChar(36)
  puesto_id                   String?                       @db.VarChar(36)
  Descripcion                 String                        @db.VarChar(100)
  Tipo                        String                        @db.VarChar(50)
  nivel                       Int
  Activo                      Boolean                       @db.Bit(1)
  createAt                    DateTime                      @default(now())
  updateAt                    DateTime                      @updatedAt
  Puesto                      Puesto?                       @relation(fields: [puesto_id], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ConfiguracionAprobacion_Puesto_puesto_id")
  SolicitudVacacionAprobacion SolicitudVacacionAprobacion[]

  @@index([puesto_id], map: "IX_ConfiguracionAprobacion_puesto_id")
}

model DetalleVoucherPagos {
  id            String   @id @db.VarChar(36)
  voucherPagoId String   @db.VarChar(36)
  ajusteTipoId  String   @db.VarChar(36) // Antes era TipoDeduccionId
  monto         Decimal  @db.Decimal(10, 2) // Monto efectivo para este voucher (puede venir de montoPorDefecto o override)
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt

  // Relaciones
  AjusteTipo   AjusteTipo   @relation(fields: [ajusteTipoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_DetalleVoucher_AjusteTipo")
  VoucherPagos VoucherPagos @relation(fields: [voucherPagoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_DetalleVoucher_VoucherPagos")

  @@index([ajusteTipoId], map: "IX_DetalleVoucher_AjusteTipoId")
  @@index([voucherPagoId], map: "IX_DetalleVoucher_VoucherPagoId")
}

model Empleados {
  id        String  @id @default(uuid()) @db.VarChar(36)
  puesto_id String  @db.VarChar(36)
  jefe_id   String? @db.VarChar(36)

  // Del Excel:
  numeroIdentificacion  String    @db.VarChar(50)
  nombre                String    @db.VarChar(100)
  apellido              String    @db.VarChar(100)
  correo                String    @db.LongText
  FechaNacimiento       DateTime? @db.DateTime(6)
  fechaIngreso          DateTime? @db.DateTime(6)
  departamentoDomicilio String?   @db.VarChar(100)
  ciudadDomicilio       String?   @db.VarChar(100)
  colonia               String?   @db.VarChar(100)
  telefono              String?   @db.VarChar(20)
  profesion             String?   @db.VarChar(100)

  // Campos existentes
  Vacaciones Int
  genero     String?  @db.VarChar(20)
  activo     Boolean  @db.Bit(1)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  // Relaciones
  Empleados                   Empleados?                    @relation("EmpleadosToEmpleados", fields: [jefe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Empleados             Empleados[]                   @relation("EmpleadosToEmpleados")
  activosAsignados            Activo[]                      @relation("EmpleadoActivos")
  Puesto                      Puesto                        @relation(fields: [puesto_id], references: [Id], onDelete: Cascade, onUpdate: NoAction)
  ReporteDise_o               ReporteDiseño[]
  SolicitudVacacion           SolicitudVacacion[]
  SolicitudVacacionAprobacion SolicitudVacacionAprobacion[]
  Usuarios                    Usuarios?
  VoucherPagos                VoucherPagos[]

  NotasCreadas   Nota[] @relation("NotasCreadas")
  NotasAsignadas Nota[] @relation("NotasAsignadas")
  NotasAprobadas Nota[] @relation("NotasAprobador")

  @@index([jefe_id])
  @@index([puesto_id])
}

model Permiso {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  roles       RolPermiso[]
}

model Puesto {
  Id                      String                    @id @db.VarChar(36)
  Nombre                  String                    @db.VarChar(100)
  Descripcion             String                    @db.VarChar(100)
  Activo                  Boolean                   @db.Bit(1)
  createAt                DateTime                  @default(now())
  updateAt                DateTime                  @updatedAt
  ConfiguracionAprobacion ConfiguracionAprobacion[]
  Empleados               Empleados[]
  SolicitudVacacion       SolicitudVacacion[]
}

model ReporteDiseño {
  Id            String   @id @db.VarChar(36)
  EmpleadoId    String   @db.VarChar(36)
  SeccionId     String   @db.VarChar(36)
  FechaRegistro DateTime @db.DateTime(6)
  PaginaInicio  Int
  PaginaFin     Int
  HoraInicio    String   @db.VarChar(36) // almacenará "HH:MM:SS"
  HoraFin       String   @db.VarChar(36) // almacenará "HH:MM:SS"
  Observacion   String?  @db.LongText
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt

  Empleados   Empleados   @relation(fields: [EmpleadoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ReporteDiseño_Empleados_EmpleadoId")
  TipoSeccion TipoSeccion @relation(fields: [SeccionId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ReporteDiseño_TipoSeccion_SeccionId")

  @@index([EmpleadoId], map: "IX_ReporteDiseño_EmpleadoId")
  @@index([SeccionId], map: "IX_ReporteDiseño_SeccionId")
  @@map("ReporteDiseño")
}

model RolPermiso {
  id        String   @id @default(uuid())
  rolId     String
  permisoId String
  createAt  DateTime @default(now())

  permiso Permiso @relation(fields: [permisoId], references: [id])
  rol     Rol     @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@index([permisoId], map: "RolPermiso_permisoId_fkey")
}

model Rol {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  permisos    RolPermiso[]
  usuarios    Usuarios[]
}

model SolicitudVacacion {
  Id                          String                        @id @db.VarChar(36)
  EmpleadoId                  String                        @db.VarChar(36)
  PuestoId                    String                        @db.VarChar(36)
  FechaSolicitud              DateTime                      @db.DateTime(6)
  FechaInicio                 DateTime                      @db.DateTime(6)
  FechaFin                    DateTime                      @db.DateTime(6)
  FechaPresentacion           DateTime?                     @db.DateTime(6)
  Aprobado                    Boolean?
  Descripcion                 String                        @db.VarChar(250)
  Periodo                     String?                       @db.VarChar(250)
  DiasGozados                 Int? // Changed to nullable
  DiasRestantes               Int? // Changed to nullable
  createAt                    DateTime                      @default(now())
  updateAt                    DateTime                      @updatedAt
  Empleados                   Empleados                     @relation(fields: [EmpleadoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_SolicitudVacacion_Empleados_EmpleadoId")
  Puesto                      Puesto                        @relation(fields: [PuestoId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_SolicitudVacacion_Puesto_PuestoId")
  SolicitudVacacionAprobacion SolicitudVacacionAprobacion[]

  @@index([EmpleadoId], map: "IX_SolicitudVacacion_EmpleadoId")
  @@index([PuestoId], map: "IX_SolicitudVacacion_PuestoId")
}

model SolicitudVacacionAprobacion {
  Id                        String                  @id @db.VarChar(36)
  SolicitudVacacionId       String                  @db.VarChar(36)
  ConfiguracionAprobacionId String                  @db.VarChar(36)
  EmpleadoAprobadorId       String?                 @db.VarChar(36)
  Nivel                     Int
  Descripcion               String                  @db.LongText
  Estado                    String                  @db.VarChar(50)
  createAt                  DateTime                @default(now())
  updateAt                  DateTime                @updatedAt
  FechaDecision             DateTime?               @db.DateTime(6)
  Comentarios               String?                 @db.LongText
  ConfiguracionAprobacion   ConfiguracionAprobacion @relation(fields: [ConfiguracionAprobacionId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_SolicitudVacacionAprobacion_ConfiguracionAprobacion_Configur~")
  Empleados                 Empleados?              @relation(fields: [EmpleadoAprobadorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SolicitudVacacionAprobacion_Empleados_EmpleadoAprobadorId")
  SolicitudVacacion         SolicitudVacacion       @relation(fields: [SolicitudVacacionId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_SolicitudVacacionAprobacion_SolicitudVacacion_SolicitudVacac~")

  @@index([ConfiguracionAprobacionId], map: "IX_SolicitudVacacionAprobacion_ConfiguracionAprobacionId")
  @@index([EmpleadoAprobadorId], map: "IX_SolicitudVacacionAprobacion_EmpleadoAprobadorId")
  @@index([SolicitudVacacionId], map: "IX_SolicitudVacacionAprobacion_SolicitudVacacionId")
}

model AjusteTipo {
  id              String          @id @db.VarChar(36)
  nombre          String          @db.VarChar(100)
  descripcion     String?         @db.VarChar(100)
  categoria       AjusteCategoria
  montoPorDefecto Decimal         @db.Decimal(10, 2)
  activo          Boolean         @db.Bit(1) // Si está disponible o no
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt

  // Relación con detalles de voucher
  DetalleVoucherPagos DetalleVoucherPagos[]

  @@map("TipoDeducciones") // Para conservar el nombre de tabla en la BD si lo deseas
}

model TipoSeccion {
  Id            String           @id @db.VarChar(36)
  Nombre        String           @db.VarChar(100)
  Descripcion   String           @db.VarChar(100)
  Activo        Boolean          @db.Bit(1)
  CreateAt      DateTime         @default(now())
  UpdateAt      DateTime         @updatedAt
  ReporteDise_o ReporteDiseño[]
}

model TipoSolicitud {
  Id          String   @id @db.VarChar(36)
  Nombre      String   @db.VarChar(100)
  Descripcion String   @db.VarChar(100)
  activo      Boolean  @db.Bit(1)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Usuarios {
  id                  String               @id @db.VarChar(36)
  empleado_id         String               @unique(map: "IX_Usuarios_empleado_id") @db.VarChar(36)
  usuario             String               @db.VarChar(50)
  contrasena          String               @db.LongText
  DebeCambiarPassword Boolean?
  createAt            DateTime             @default(now())
  updateAt            DateTime             @updatedAt
  rol_id              String               @db.VarChar(36)
  activo              Boolean              @db.Bit(1)
  Empleados           Empleados            @relation(fields: [empleado_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Usuarios_Empleados_empleado_id")
  rol                 Rol                  @relation(fields: [rol_id], references: [id])
  PasswordResetToken  PasswordResetToken[]
  Mensaje             Mensaje[]
  Participante        Participante[]

  @@index([rol_id], map: "IX_Usuarios_rol_id")
}

// Conversación principal: GROUP (grupal) o PRIVATE (entre 2 usuarios)
model Conversacion {
  id            String           @id @default(uuid()) @db.VarChar(36)
  nombre        String? // nombre del grupo (solo aplica para GROUP)
  tipo          TipoConversacion @default(GROUP)
  creadorId     String?          @db.VarChar(36) // quien creó la conversación (opcional para PRIVATE)
  participantes Participante[]
  mensajes      Mensaje[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([tipo])
  @@index([creadorId])
}

model Participante {
  id             String       @id @default(uuid()) @db.VarChar(36)
  conversacionId String       @db.VarChar(36)
  usuarioId      String       @db.VarChar(36) // referencia a Usuarios.id
  conversacion   Conversacion @relation(fields: [conversacionId], references: [id], onDelete: Cascade)
  usuario        Usuarios     @relation(fields: [usuarioId], references: [id])
  lastReadAt     DateTime?
  rol            String? // opcional: "admin", "member", etc.
  joinedAt       DateTime     @default(now())

  @@unique([conversacionId, usuarioId])
  @@index([usuarioId])
}

model Mensaje {
  id             String          @id @default(uuid()) @db.VarChar(36)
  conversacionId String          @db.VarChar(36)
  autorId        String          @db.VarChar(36) // referencia a Usuarios.id
  contenido      String          @db.LongText
  editedAt       DateTime?
  deletedAt      DateTime?
  attachments    Attachment[]
  estados        MensajeEstado[]
  createdAt      DateTime        @default(now())

  conversacion Conversacion @relation(fields: [conversacionId], references: [id], onDelete: Cascade)
  autor        Usuarios     @relation(fields: [autorId], references: [id])

  @@index([conversacionId, createdAt])
  @@index([autorId])
}

model MensajeEstado {
  id          String    @id @default(uuid()) @db.VarChar(36)
  mensajeId   String    @db.VarChar(36)
  usuarioId   String    @db.VarChar(36) // participante que tiene este estado
  entregado   Boolean   @default(false)
  leido       Boolean   @default(false)
  entregadoAt DateTime?
  leidoAt     DateTime?

  mensaje Mensaje @relation(fields: [mensajeId], references: [id], onDelete: Cascade)

  @@unique([mensajeId, usuarioId])
  @@index([usuarioId])
}

model Attachment {
  id        String   @id @default(uuid()) @db.VarChar(36)
  mensajeId String   @db.VarChar(36)
  url       String
  tipo      String? // image, video, file...
  nombre    String?
  tamaño   Int?
  createdAt DateTime @default(now())

  mensaje Mensaje @relation(fields: [mensajeId], references: [id], onDelete: Cascade)

  @@index([mensajeId])
}

enum TipoConversacion {
  GROUP
  PRIVATE
}

enum AjusteCategoria {
  DEDUCCION
  BONO
}

model VoucherPagos {
  id             String   @id @db.VarChar(36)
  empleadoId     String   @db.VarChar(36)
  fechaPago      DateTime @db.DateTime(6)
  diasTrabajados Int
  salarioDiario  Decimal  @db.Decimal(10, 2)
  salarioMensual Decimal  @db.Decimal(10, 2)
  netoPagar      Decimal  @db.Decimal(10, 2)
  observaciones  String   @db.LongText
  createAt       DateTime @default(now())
  updateAt       DateTime @updatedAt

  // Relaciones
  DetalleVoucherPagos DetalleVoucherPagos[]
  Empleados           Empleados             @relation(fields: [empleadoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_VoucherPagos_Empleados")

  @@index([empleadoId], map: "IX_VoucherPagos_EmpleadoId")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @db.VarChar(36)
  token     String   @unique @db.VarChar(128)
  expiresAt DateTime
  createdAt DateTime @default(now())

  Usuario Usuarios @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_PasswordResetToken_userId")
}

/// ==========================
/// 1. Categorías de Activos
model CategoriaActivo {
  id          String   @id @default(uuid())
  nombre      String   @db.VarChar(100)
  descripcion String?  @db.Text
  activo      Boolean  @db.Bit(1)
  activos     Activo[]
}

/// ==========================
/// 2. Estado de Activo (Catálogo)
model EstadoActivo {
  id          String  @id @default(uuid())
  nombre      String  @db.VarChar(50) // "Bueno", "Medio", "Dañado", etc.
  descripcion String? @db.Text

  activos   Activo[] // Relación inversa (estado actual)
  historial HistorialActivo[] // Relación inversa (posición como FK en Historial)
}

/// ==========================
/// 3. Activo (Inventario)
model Activo {
  id                 String          @id @default(uuid())
  codigoBarra        String          @unique @db.VarChar(100)
  nombre             String          @db.VarChar(150)
  descripcion        String?         @db.Text
  categoriaId        String          @db.VarChar(36)
  empleadoAsignadoId String?         @db.VarChar(36)
  fechaAsignacion    DateTime?       @db.DateTime(6)
  fechaRegistro      DateTime        @default(now()) @db.DateTime(6)
  estadoActualId     String?         @db.VarChar(36)
  activo             Boolean         @db.Bit(1)
  // Relaciones
  categoria          CategoriaActivo @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  empleadoAsignado   Empleados?      @relation("EmpleadoActivos", fields: [empleadoAsignadoId], references: [id], onDelete: SetNull)
  estadoActual       EstadoActivo?   @relation(fields: [estadoActualId], references: [id], onDelete: SetNull)

  historialEstados HistorialActivo[]

  @@index([categoriaId], map: "IX_Activo_categoriaId")
  @@index([empleadoAsignadoId], map: "IX_Activo_empleadoAsignadoId")
  @@index([estadoActualId], map: "IX_Activo_estadoActualId")
}

/// ==========================
/// 4. Historial de Estados por Activo (Revisiones anuales)
model HistorialActivo {
  id            String   @id @default(uuid())
  activoId      String   @db.VarChar(36)
  fechaRevision DateTime @db.DateTime(6)
  estadoId      String   @db.VarChar(36)
  observaciones String?  @db.Text

  activo Activo       @relation(fields: [activoId], references: [id], onDelete: Cascade)
  estado EstadoActivo @relation(fields: [estadoId], references: [id], onDelete: Restrict)

  @@index([activoId], map: "IX_HistorialActivo_activoId")
  @@index([estadoId], map: "IX_HistorialActivo_estadoId")
}

enum NotaEstado {
  PENDIENTE
  APROBADA
  FINALIZADA
  RECHAZADA
}

model Nota {
  id                  String     @id @default(uuid()) @db.VarChar(36)
  creadorEmpleadoId   String     @db.VarChar(36)
  asignadoEmpleadoId  String?    @db.VarChar(36)
  aprobadorEmpleadoId String?    @db.VarChar(36)
  estado              NotaEstado
  titulo              String     @db.VarChar(250)
  descripcion         String     @db.LongText
  fellback            String?    @db.LongText
  createAt            DateTime   @default(now()) @db.DateTime(6)
  updateAt            DateTime   @updatedAt @db.DateTime(6)

  creador   Empleados  @relation("NotasCreadas", fields: [creadorEmpleadoId], references: [id])
  asignado  Empleados? @relation("NotasAsignadas", fields: [asignadoEmpleadoId], references: [id])
  aprobador Empleados? @relation("NotasAprobador", fields: [aprobadorEmpleadoId], references: [id])

  @@index([creadorEmpleadoId])
  @@index([asignadoEmpleadoId])
  @@index([aprobadorEmpleadoId])
  @@index([estado])
}
